#include <iostream>
#include <cstdlib>

int main() {
    int** arrays = nullptr;
    int* sizes = nullptr;
    int arrays_count = 0;
    int total_numbers = 0;

    const int CHUNK_SIZE = 100;

    // Выделяем первую порцию памяти
    arrays = new int*[1];
    arrays[0] = new int[CHUNK_SIZE];
    sizes = new int[1];
    sizes[0] = 0;
    arrays_count = 1;

    int number;
    int min_val = -1, max_val = -1;

    while (true) {
        std::cin >> number;
        if (number < 0) break;

        // Добавляем число в текущий массив
        int current_array = arrays_count - 1;
        arrays[current_array][sizes[current_array]] = number;
        sizes[current_array]++;
        total_numbers++;

        // Обновляем min и max
        if (min_val == -1 || number < min_val) min_val = number;
        if (max_val == -1 || number > max_val) max_val = number;

        // Если текущий массив заполнен, создаем новый
        if (sizes[current_array] >= CHUNK_SIZE) {
            int** new_arrays = new int*[arrays_count + 1];
            int* new_sizes = new int[arrays_count + 1];

            for (int i = 0; i < arrays_count; i++) {
                new_arrays[i] = arrays[i];
                new_sizes[i] = sizes[i];
            }

            new_arrays[arrays_count] = new int[CHUNK_SIZE];
            new_sizes[arrays_count] = 0;

            delete[] arrays;
            delete[] sizes;

            arrays = new_arrays;
            sizes = new_sizes;
            arrays_count++;
        }
    }

    // Вывод результатов
    std::cout << "Количество чисел: " << total_numbers << std::endl;
    std::cout << "Наибольшее число: " << max_val << std::endl;
    std::cout << "Наименьшее число: " << min_val << std::endl;
    std::cout << "Занимаемая память: " << total_numbers * sizeof(int) << " байт" << std::endl;

    // Освобождение памяти
    for (int i = 0; i < arrays_count; i++) {
        delete[] arrays[i];
    }
    delete[] arrays;
    delete[] sizes;

    return 0;
}
